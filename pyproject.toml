[tool.black]
line-length = 99
target-version = ['py38']
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.docformatter]
black = true
wrap-summaries = 99
wrap-descriptions = 99

[tool.isort]
profile = "hug"
src_paths = ["pyglotaran_extras"]
include_trailing_comma = true
line_length = 99
known_first_party = ["pyglotaran_extras"]
force_single_line = true
remove_redundant_aliases = true

[tool.interrogate]
exclude = ["setup.py", "docs", "tests/*"]
ignore-init-module = true
fail-under = 100

[tool.nbqa.addopts]
flake8 = ["--extend-ignore=E402,F404"]


[tool.coverage.run]
branch = true
include = ['pyglotaran_extras/*']
omit = [
  'setup.py',
  'tests/*',
  # comment the above line if you want to see if all tests did run
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self\.debug',

  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',

  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
]

[tool.mypy]
ignore_missing_imports = true
scripts_are_modules = true
show_error_codes = true
warn_unused_ignores = true
no_implicit_optional = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
no_implicit_reexport = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false

# For now this is not use because pydoclint does not support toml when used with flake8
[tool.pydoclint]
skip-checking-short-docstrings = false
style = 'numpy'
exclude = '^(docs/|setup.py$|tests?/)'
require-return-section-when-returning-none = false
allow-init-docstring = true

[tool.ruff]

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "C", # mccabe
  "F", # pyflakes
  # "UP",  # pyupgrade
  "D", # pydocstyle
  # "N",   # pep8-naming
  "YTT", # flake8-2020
  "BLE", # flake8-blind-except
  # # "FBT", # flake8-boolean-trap
  # # "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "T10", # flake8-debugger
  "FA",  # flake8-future-annotations
  "EM",  # flake8-errmsg
  "ISC", # flake8-implicit-str-concat
  "INP", # flake8-no-pep420
  "PIE", # flake8-pie
  # "T20", # flake8-print
  # "PT",  # flake8-pytest-style
  "RSE", # flake8-raise
  "RET", # flake8-return
  # "SIM", # flake8-simplify
  # "TCH", # flake8-type-checking
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "PD",  # pandas-vet
  # "PGH", # pygrep-hooks
  "NPY", # NumPy-specific
  "RUF", # Ruff-specific
]

ignore = ["D202", "D213", "D203", "ISC002", "RUF001", "RUF002", "RUF003"]

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs/conf.py",
]

# Same as Black.
line-length = 99

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.per-file-ignores]
"setup.py" = ["D"]
"tests/*" = ["ARG001"]
